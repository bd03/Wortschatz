package wortschatz;

import java.awt.Toolkit;
import java.io.*;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * WordAdministration.java
 *
 * Created on 26.Tem.2012, 23:17:30
 */
/**
 *
 * @author Burak
 */
public class WordAdministrationFrame extends javax.swing.JFrame {

    /** Creates new form WordAdministration */
    public WordAdministrationFrame(MainFrame m) {
        initComponents();
        mF = m;
        
        int x = (Toolkit.getDefaultToolkit().getScreenSize().height/2)-this.getHeight()/2;
        int y = (Toolkit.getDefaultToolkit().getScreenSize().width/2)-this.getWidth()/2;
        this.setLocation(y, x);
        
        
        languageAndWordlistCheck();
        
        
        jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        jTable1.getColumnModel().getColumn(0).setMinWidth(2*jTable1.getWidth()/20); 
        jTable1.getColumnModel().getColumn(1).setMinWidth(5*jTable1.getWidth()/20); 
        jTable1.getColumnModel().getColumn(2).setMinWidth(2*jTable1.getWidth()/20); 
        jTable1.getColumnModel().getColumn(3).setMinWidth(6*jTable1.getWidth()/20); 
        jTable1.getColumnModel().getColumn(4).setMinWidth(3*jTable1.getWidth()/20); 
        jTable1.getColumnModel().getColumn(5).setMinWidth(2*jTable1.getWidth()/20); 
        
        listWordsAdmin();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();

        setTitle("Wortliste Verwaltung");

        jButton1.setText("Neue Wörter hinzufügen");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "der Artikel", "das Wort", "der Plural", "die Bedeutung", "die Gruppe", "Löschen"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        jButton2.setText("Änderungen speichern");
        jButton2.setToolTipText("");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 797, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 797, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 797, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 498, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
// TODO add your handling code here:
    new NewWordFrame(this).setVisible(true);
}//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int rowNumber = jTable1.getRowCount();
        try{
            BufferedWriter  ou = new BufferedWriter(new FileWriter("Words.dat"));
             
            for(int i=0;i<rowNumber;i++){
                if( jTable1.getValueAt(i, 5).equals(false)){
                    ou.write(jTable1.getValueAt(i, 0)+"");
                    ou.newLine();
                    ou.write(jTable1.getValueAt(i, 1)+"");
                    ou.newLine();
                    ou.write(jTable1.getValueAt(i, 2)+"");
                    ou.newLine();
                    ou.write(jTable1.getValueAt(i, 3)+"");
                    ou.newLine();
                    if(jTable1.getValueAt(i, 4).equals(comboBox.getItemAt(0))){
                        ou.write(0+"");
                        ou.newLine();
                    }else if(jTable1.getValueAt(i, 4).equals(comboBox.getItemAt(1))){
                        ou.write(1+"");
                        ou.newLine();
                    }else if(jTable1.getValueAt(i, 4).equals(comboBox.getItemAt(2))){
                        ou.write(2+"");
                        ou.newLine();
                    }
                }
            }
            
            ou.close();
        }catch(Exception e){
            
        }
        
        //this.setVisible(false);
        
        listWordsAdmin();
        updateMainFrame();
                            
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(WordAdministrationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(WordAdministrationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(WordAdministrationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(WordAdministrationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//
//            public void run() {
//                new WordAdministrationFrame().setVisible(true);
//            }
//        });
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    static final String lineSeparator = System.getProperty ( "line.separator" );
    JComboBox comboBox;
    
    private void languageAndWordlistCheck() {    
        String language="", wordbook="";      
        try{
            // Open the file that is the first 
            // command line parameter
            FileInputStream fstream = new FileInputStream("Options.dat");
            // Get the object of DataInputStream
            DataInputStream in = new DataInputStream(fstream);
            BufferedReader br = new BufferedReader(new InputStreamReader(in));
            String strLine;
            //Read File Line By Line
            int count =0;
            
            while ((strLine = br.readLine()) != null)   {
                // Print the content on the console
                if(count == 0){
                    wordbook = strLine;
                }else if(count == 1){
                    language = strLine;
                }
                count++;
            }
            //Close the input stream
            in.close();
        }catch (Exception e){//Catch exception if any
            System.err.println("Error: " + e.getMessage());
        }
        String [] headers;
        
        
        comboBox = new JComboBox();
        
        //prepare the language selected:
        if(Integer.parseInt(language) == 0){
            headers = new String [] {"der Artikel", "das Wort", "der Plural", "die Bedeutung", "die Gruppe", "Löschen"};
            jButton1.setText("Neue Wörter hinzufügen");
            jButton2.setText("Änderungen speichern");
            this.setTitle("Wortliste Verwaltung");
            comboBox.addItem("Neue Wörter");
            comboBox.addItem("Nicht so sicher");
            comboBox.addItem("Gut bekannt");
        }else if(Integer.parseInt(language) == 1){
            headers = new String [] {"Artikel", "Kelime", "Çoğulu", "Anlamı", "Grup", "Sil"};
            jButton1.setText("Yeni kelimeler ekle");
            jButton2.setText("Değişiklikleri kaydet");
            this.setTitle("Kelime Listelerini Yönet");
            comboBox.addItem("Yeni kelimeler");
            comboBox.addItem("Emin olunamayanlar");
            comboBox.addItem("İyi bilinenler");
        }else{
            headers = new String [] {"The Article", "The Word", "Plural Form", "Meaning", "The Group", "Delete"};
            jButton1.setText("Add new words");
            jButton2.setText("Save changes");
            this.setTitle("Edit Word Lists");
            comboBox.addItem("New Words");
            comboBox.addItem("Not safe");
            comboBox.addItem("Well known");
        }
        
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            headers
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        
        TableColumn tC = jTable1.getColumnModel().getColumn(4);
        tC.setCellEditor(new DefaultCellEditor(comboBox));
        
    }
    
    private MainFrame mF;
    
    public void listWordsAdmin(){
        try{
            //write what has been written
            FileInputStream fstream = new FileInputStream("Words.dat");
            DataInputStream in = new DataInputStream(fstream);
            BufferedReader br = new BufferedReader(new InputStreamReader(in));
            //jTable1.removeAll();
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            for(int i=model.getRowCount()-1;i>=0;i--){
                model.removeRow(i);
            }
            
            String strLine;
            //Read File Line By Line
            int counter = 0;
            String[] info = new String[5];
            while ((strLine = br.readLine()) != null)   {
                if(counter%5 == 0){
                    info[0] = strLine;
                }else if(counter%5 == 1){
                    info[1] = strLine;
                }else if(counter%5 == 2){
                    info[2] = strLine;
                }else if(counter%5 == 3){
                    info[3] = strLine;
                }else if(counter%5 == 4){
                    info[4] = strLine;
                    model.addRow(new Object[]{info[0],info[1],info[2],info[3],comboBox.getItemAt(Integer.parseInt(info[4])),false});
                    
                }
                counter++;
            }
            
            in.close();
        }catch(Exception e){
            System.err.println("Error: " + e.getMessage());
        }
    }
    
    public void updateMainFrame(){
        mF.languageAndWordlistCheckMain();
        mF.loadWordbook();
        mF.writeOnButtons();
    }
}
